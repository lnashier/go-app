// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internal/proto/echo/echo.proto

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Echo_Single_FullMethodName        = "/internal.proto.echo.Echo/Single"
	Echo_ServiceStream_FullMethodName = "/internal.proto.echo.Echo/ServiceStream"
	Echo_ClientStream_FullMethodName  = "/internal.proto.echo.Echo/ClientStream"
	Echo_BothStream_FullMethodName    = "/internal.proto.echo.Echo/BothStream"
)

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoClient interface {
	Single(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServiceStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Echo_ServiceStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Echo_ClientStreamClient, error)
	BothStream(ctx context.Context, opts ...grpc.CallOption) (Echo_BothStreamClient, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Single(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Echo_Single_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) ServiceStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Echo_ServiceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echo_ServiceDesc.Streams[0], Echo_ServiceStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_ServiceStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type echoServiceStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Echo_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echo_ServiceDesc.Streams[1], Echo_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoClientStreamClient{stream}
	return x, nil
}

type Echo_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type echoClientStreamClient struct {
	grpc.ClientStream
}

func (x *echoClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) BothStream(ctx context.Context, opts ...grpc.CallOption) (Echo_BothStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echo_ServiceDesc.Streams[2], Echo_BothStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoBothStreamClient{stream}
	return x, nil
}

type Echo_BothStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type echoBothStreamClient struct {
	grpc.ClientStream
}

func (x *echoBothStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoBothStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServer is the server API for Echo service.
// All implementations must embed UnimplementedEchoServer
// for forward compatibility
type EchoServer interface {
	Single(context.Context, *Request) (*Response, error)
	ServiceStream(*Request, Echo_ServiceStreamServer) error
	ClientStream(Echo_ClientStreamServer) error
	BothStream(Echo_BothStreamServer) error
	mustEmbedUnimplementedEchoServer()
}

// UnimplementedEchoServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (UnimplementedEchoServer) Single(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Single not implemented")
}
func (UnimplementedEchoServer) ServiceStream(*Request, Echo_ServiceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServiceStream not implemented")
}
func (UnimplementedEchoServer) ClientStream(Echo_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedEchoServer) BothStream(Echo_BothStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BothStream not implemented")
}
func (UnimplementedEchoServer) mustEmbedUnimplementedEchoServer() {}

// UnsafeEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServer will
// result in compilation errors.
type UnsafeEchoServer interface {
	mustEmbedUnimplementedEchoServer()
}

func RegisterEchoServer(s grpc.ServiceRegistrar, srv EchoServer) {
	s.RegisterService(&Echo_ServiceDesc, srv)
}

func _Echo_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Echo_Single_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Single(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_ServiceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).ServiceStream(m, &echoServiceStreamServer{stream})
}

type Echo_ServiceStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type echoServiceStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Echo_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).ClientStream(&echoClientStreamServer{stream})
}

type Echo_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type echoClientStreamServer struct {
	grpc.ServerStream
}

func (x *echoClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_BothStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).BothStream(&echoBothStreamServer{stream})
}

type Echo_BothStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type echoBothStreamServer struct {
	grpc.ServerStream
}

func (x *echoBothStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoBothStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Echo_ServiceDesc is the grpc.ServiceDesc for Echo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.proto.echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _Echo_Single_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServiceStream",
			Handler:       _Echo_ServiceStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Echo_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BothStream",
			Handler:       _Echo_BothStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/echo/echo.proto",
}
